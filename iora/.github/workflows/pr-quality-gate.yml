name: PR Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # PR Validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check PR size
      run: |
        # Check if PR is too large
        LINES_CHANGED=$(git diff --stat ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | tail -1 | awk '{print $4+$6}')
        if [ "$LINES_CHANGED" -gt 1000 ]; then
          echo "‚ö†Ô∏è  Large PR detected ($LINES_CHANGED lines changed)"
          echo "Consider breaking this into smaller PRs for better review"
        fi

    - name: Check for sensitive data
      run: |
        # Check for accidentally committed sensitive data
        if grep -r "password\|secret\|token\|key.*=.*[A-Za-z0-9]\{20,\}" --include="*.rs" --include="*.toml" --include="*.md" . --exclude-dir=.git --exclude-dir=target; then
          echo "‚ö†Ô∏è  Potential sensitive data found in code"
          echo "Please ensure no secrets are committed"
          exit 1
        fi

  # Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: pr-validation
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check for dead code
      run: cargo clippy --all-targets -- -W dead_code

    - name: Check documentation
      run: |
        cargo doc --no-deps --document-private-items
        # Check if all public APIs are documented
        if grep -r "pub fn" src/ | grep -v "///"; then
          echo "‚ö†Ô∏è  Some public functions lack documentation"
        fi

  # Security Checks
  security-check:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: pr-validation
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Run cargo audit
      run: |
        cargo install cargo-audit
        cargo audit --json | jq '.vulnerabilities.found == false' || (echo "Security vulnerabilities found!" && exit 1)

    - name: Check for unsafe code
      run: |
        # Count unsafe blocks
        UNSAFE_COUNT=$(grep -r "unsafe" src/ | wc -l)
        if [ "$UNSAFE_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è  Found $UNSAFE_COUNT unsafe blocks"
          echo "Please review unsafe code usage"
        fi

  # Test Execution
  pr-tests:
    name: PR Tests
    runs-on: ubuntu-latest
    needs: [code-quality, security-check]
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache Cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: cargo test --lib --verbose

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: cargo test --test integration_tests --verbose

  # Performance Impact Check
  performance-impact:
    name: Performance Impact Check
    runs-on: ubuntu-latest
    needs: pr-tests
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build for benchmarking
      run: cargo build --release

    - name: Run basic performance test
      run: |
        echo "Running basic performance check..."
        timeout 30 cargo test --test performance_tests --release -- --nocapture || echo "Performance test completed"

  # Coverage Check
  coverage-check:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    needs: pr-tests
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --out Xml --output-dir coverage-pr

    - name: Check coverage threshold
      run: |
        # Extract coverage percentage
        COVERAGE=$(grep -oP '(?<=<coverage line-rate=")[^"]*' coverage-pr/cobertura.xml | head -1)
        COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l 2>/dev/null || echo "0")
        COVERAGE_INT=$(printf "%.0f" "$COVERAGE_PERCENT")

        echo "Current coverage: ${COVERAGE_INT}%"

        # Check if coverage is above threshold (80%)
        if [ "$COVERAGE_INT" -lt 80 ]; then
          echo "‚ùå Coverage too low: ${COVERAGE_INT}% (minimum: 80%)"
          echo "Please add more tests to increase coverage"
          exit 1
        else
          echo "‚úÖ Coverage acceptable: ${COVERAGE_INT}%"
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: pr-coverage-report
        path: coverage-pr/

  # PR Review Checklist
  pr-checklist:
    name: PR Review Checklist
    runs-on: ubuntu-latest
    needs: [code-quality, security-check, pr-tests, performance-impact, coverage-check]
    if: always()
    steps:
    - name: Generate PR checklist
      run: |
        echo "## PR Quality Gate Checklist" > pr-checklist.md
        echo "" >> pr-checklist.md
        echo "### Code Quality" >> pr-checklist.md
        echo "- ‚úÖ Formatting check: ${{ needs.code-quality.result }}" >> pr-checklist.md
        echo "- ‚úÖ Clippy warnings: ${{ needs.code-quality.result }}" >> pr-checklist.md
        echo "- ‚úÖ Documentation: ${{ needs.code-quality.result }}" >> pr-checklist.md
        echo "" >> pr-checklist.md
        echo "### Security" >> pr-checklist.md
        echo "- ‚úÖ Security audit: ${{ needs.security-check.result }}" >> pr-checklist.md
        echo "- ‚úÖ No sensitive data: ${{ needs.pr-validation.result }}" >> pr-checklist.md
        echo "" >> pr-checklist.md
        echo "### Testing" >> pr-checklist.md
        echo "- ‚úÖ Unit tests: ${{ needs.pr-tests.result }}" >> pr-checklist.md
        echo "- ‚úÖ Integration tests: ${{ needs.pr-tests.result }}" >> pr-checklist.md
        echo "- ‚úÖ Coverage check: ${{ needs.coverage-check.result }}" >> pr-checklist.md
        echo "" >> pr-checklist.md
        echo "### Performance" >> pr-checklist.md
        echo "- ‚úÖ Performance impact: ${{ needs.performance-impact.result }}" >> pr-checklist.md
        echo "" >> pr-checklist.md

        # Determine overall status
        if [ "${{ needs.code-quality.result }}" = "success" ] && \
           [ "${{ needs.security-check.result }}" = "success" ] && \
           [ "${{ needs.pr-tests.result }}" = "success" ] && \
           [ "${{ needs.coverage-check.result }}" = "success" ] && \
           [ "${{ needs.performance-impact.result }}" = "success" ]; then
          echo "## ‚úÖ PR Quality Gates PASSED" >> pr-checklist.md
          echo "Ready for review and merge!" >> pr-checklist.md
        else
          echo "## ‚ùå PR Quality Gates FAILED" >> pr-checklist.md
          echo "Please address the failed checks before merging." >> pr-checklist.md
        fi

    - name: Upload PR checklist
      uses: actions/upload-artifact@v3
      with:
        name: pr-checklist
        path: pr-checklist.md

    - name: Comment on PR with checklist
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const checklist = fs.readFileSync('pr-checklist.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: checklist
          });

  # Quality Gate Decision
  quality-gate-decision:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: [pr-validation, code-quality, security-check, pr-tests, performance-impact, coverage-check]
    if: always()
    outputs:
      approved: ${{ steps.decision.outputs.approved }}
    steps:
    - name: Make quality gate decision
      id: decision
      run: |
        if [ "${{ needs.pr-validation.result }}" = "success" ] && \
           [ "${{ needs.code-quality.result }}" = "success" ] && \
           [ "${{ needs.security-check.result }}" = "success" ] && \
           [ "${{ needs.pr-tests.result }}" = "success" ] && \
           [ "${{ needs.performance-impact.result }}" != "failure" ] && \
           [ "${{ needs.coverage-check.result }}" = "success" ]; then
          echo "approved=true" >> $GITHUB_OUTPUT
          echo "üéâ All quality gates passed!"
        else
          echo "approved=false" >> $GITHUB_OUTPUT
          echo "‚ùå Quality gates failed - review required"
          exit 1
        fi

  # Auto-approve or request changes
  auto-review:
    name: Auto Review
    runs-on: ubuntu-latest
    needs: quality-gate-decision
    if: needs.quality-gate-decision.outputs.approved == 'true'
    steps:
    - name: Auto-approve PR
      uses: actions/github-script@v6
      with:
        script: |
          // Auto-approve if all quality gates pass
          github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            event: 'APPROVE',
            body: 'ü§ñ **Automated Review: APPROVED**\n\nAll quality gates have passed successfully!\n\n‚úÖ Code formatting\n‚úÖ Clippy checks\n‚úÖ Security audit\n‚úÖ Test coverage\n‚úÖ Performance impact\n\nReady for human review and merge.'
          });

