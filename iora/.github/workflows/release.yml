name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: iora

jobs:
  # Pre-release validation
  pre-release-checks:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run full test suite
      run: cargo test --all-targets --all-features

    - name: Build release binary
      run: cargo build --release

    - name: Test release binary
      run: |
        ./target/release/${{ env.BINARY_NAME }} --version
        ./target/release/${{ env.BINARY_NAME }} --help

    - name: Check release notes
      run: |
        if [ ! -f RELEASES.md ] && [ ! -f CHANGELOG.md ]; then
          echo "⚠️  No release notes found (RELEASES.md or CHANGELOG.md)"
        fi

  # Build release binaries for multiple platforms
  build-release:
    name: Build Release Binaries
    needs: pre-release-checks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          BINARY_NAME="${{ env.BINARY_NAME }}.exe"
          ARCHIVE_NAME="${{ env.BINARY_NAME }}-${{ needs.pre-release-checks.outputs.version }}-${{ matrix.name }}.zip"
          7z a ../../../$ARCHIVE_NAME $BINARY_NAME
        else
          BINARY_NAME="${{ env.BINARY_NAME }}"
          ARCHIVE_NAME="${{ env.BINARY_NAME }}-${{ needs.pre-release-checks.outputs.version }}-${{ matrix.name }}.tar.gz"
          tar czf ../../../$ARCHIVE_NAME $BINARY_NAME
        fi

    - name: Upload release asset
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-${{ needs.pre-release-checks.outputs.version }}-${{ matrix.name }}
        path: ${{ env.BINARY_NAME }}-${{ needs.pre-release-checks.outputs.version }}-${{ matrix.name }}.*

  # Create Docker images
  docker-release:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: pre-release-checks
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: [pre-release-checks, build-release, docker-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all release assets
      uses: actions/download-artifact@v3

    - name: Generate release notes
      run: |
        VERSION="${{ needs.pre-release-checks.outputs.version }}"
        echo "# Release $VERSION" > release-notes.md
        echo "" >> release-notes.md
        echo "## Changes" >> release-notes.md
        echo "" >> release-notes.md

        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log --pretty=format:"%s" $LAST_TAG..HEAD | while read line; do
            echo "- $line" >> release-notes.md
          done
        else
          echo "- Initial release" >> release-notes.md
        fi

        echo "" >> release-notes.md
        echo "## Assets" >> release-notes.md
        echo "- Binaries for Linux, macOS, and Windows" >> release-notes.md
        echo "- Docker image available at: \`${{ github.repository }}:$VERSION\`" >> release-notes.md

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.pre-release-checks.outputs.version }}
        name: Release ${{ needs.pre-release-checks.outputs.version }}
        body_path: release-notes.md
        files: |
          iora-*/iora-*.tar.gz
          iora-*/iora-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release notifications
  post-release:
    name: Post-Release Tasks
    needs: create-release
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify release completion
      run: |
        echo "🎉 Release ${{ needs.pre-release-checks.outputs.version }} completed successfully!"
        echo "Release assets uploaded to GitHub"
        echo "Docker image pushed to registry"

    - name: Update release status
      run: |
        echo "release_completed=true" >> $GITHUB_ENV

  # Rollback preparation (in case of issues)
  rollback-plan:
    name: Rollback Plan
    needs: [create-release, post-release]
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Create rollback issue
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Release Rollback Required - ${{ needs.pre-release-checks.outputs.version }}`,
            body: `## Release Rollback Required

The release ${{ needs.pre-release-checks.outputs.version }} encountered issues and may need to be rolled back.

### Immediate Actions:
1. **Stop deployment** if release is still being deployed
2. **Assess impact** of any deployed changes
3. **Notify stakeholders** of potential rollback

### Rollback Steps:
1. **Revert GitHub release** (delete the release tag)
2. **Remove Docker images** if deployed
3. **Update documentation** to reflect rollback
4. **Communicate changes** to users

### Investigation Required:
- Review the release workflow logs
- Check for any deployment failures
- Validate rollback procedures
- Assess data integrity

### Prevention:
- Review the failing tests/checks
- Update CI/CD pipeline if needed
- Improve pre-release validation

/cc @${{ github.repository_owner }}`,
            labels: ['release', 'rollback', 'urgent', 'bug']
          })

  # Success notification
  success-notification:
    name: Release Success Notification
    needs: [create-release, post-release]
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Success notification
      run: |
        echo "🎉 Release ${{ needs.pre-release-checks.outputs.version }} completed successfully!"
        echo "✅ All quality gates passed"
        echo "✅ Binaries built for all platforms"
        echo "✅ Docker image published"
        echo "✅ GitHub release created"
        echo "✅ Release notes generated"

