name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-test:
    name: Rust Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run cargo check
        run: cargo check

      - name: Run clippy
        run: cargo clippy -- -D warnings -A clippy::redundant-field-names -A unused-variables -A dead-code -A unused-assignments -A deprecated -A clippy::should-implement-trait -A clippy::await-holding-lock -A clippy::needless-return

      - name: Run rustfmt check
        run: cargo fmt --all -- --check

      - name: Run unit tests
        run: cargo test --lib

      - name: Run integration tests
        run: cargo test --test integration_tests

      - name: Run configuration tests
        run: cargo test --test config_tests

      - name: Run authentication tests
        run: cargo test --test auth_tests

      - name: Run API integration tests
        run: cargo test --test api_integration_tests

      - name: Run E2E authentication tests
        run: cargo test --test e2e_authentication_tests

  typescript-test:
    name: TypeScript/MCP Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: iora/mcp/package-lock.json

      - name: Install dependencies
        run: cd iora/mcp && npm ci

      - name: Run TypeScript tests
        run: cd iora/mcp && npm run test

      - name: Build TypeScript
        run: cd iora/mcp && npm run build

      - name: Lint TypeScript
        run: cd iora/mcp && npm run lint

  nextjs-test:
    name: Next.js Demo Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: demo/package-lock.json

      - name: Install dependencies
        run: cd demo && npm ci

      - name: Run Next.js tests
        run: cd demo && npm run test:run

      - name: Build Next.js demo
        run: cd demo && npm run build

      - name: Lint Next.js demo
        run: cd demo && npm run lint

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --ignore-tests --out Lcov --output-dir coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit --ignore RUSTSEC-2024-0344

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-criterion
        run: cargo install cargo-criterion

      - name: Run performance benchmarks
        run: cargo criterion

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: target/criterion/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: iora:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release Build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release

      - name: Create release archive
        run: |
          tar -czf iora-linux-x86_64.tar.gz -C target/release iora
          sha256sum iora-linux-x86_64.tar.gz > iora-linux-x86_64.tar.gz.sha256

      - name: Create GitHub release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            iora-linux-x86_64.tar.gz
            iora-linux-x86_64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [rust-test, typescript-test, nextjs-test, coverage, security-audit, performance, docker, release]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on success
        if: needs.rust-test.result == 'success' && needs.typescript-test.result == 'success' && needs.nextjs-test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
